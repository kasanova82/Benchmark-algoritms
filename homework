using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;


namespace Homework_ASTD
{



    class Program
    {
        static void Main(string[] args)
        {

            Console.WriteLine("Вэлком! Программа оценки работы алгоритмов приветствует Вас!");
            Console.WriteLine("Режим работы программы выбери ты:" +
                "\n1 - Хочу результат на консоли(отладка)" +
                "\n2 - Хочу видеть всё в файле");
            int q;
            while (true)
            {
                Console.WriteLine("Не ошибись в нажатии клавиши, о юный подаван");
                int b = int.Parse(Console.ReadLine());
                if (b > 0 && b < 3)
                {
                    q = b;
                    break;
                }
            }

            Console.WriteLine("Выбери мощность анализируемого массива, о юный подаван. " +
                "Не ограничен ты в выборе своём. Ноль не вводи:");
            int lenght = int.Parse(Console.ReadLine());
            Console.WriteLine("Выбери теперь максимальное значение элемента в массиве:");
            int my_maxValue = int.Parse(Console.ReadLine());
            switch (q)                                          // выбор режима работы 
        {
                case (1):

            Console.WriteLine("Выбери теперь массива тип:");
            Console.WriteLine("1 Неотсортированный массив случайных значений:");
            Console.WriteLine("2 Частично отсортированный массив - 50/50:");
            Console.WriteLine("3 Частично отсортированный массив - 90/10:");
            Console.WriteLine("4 Практически отсортированный массив, один эл-т лишний");
            int a;
            while (true)
            {
                Console.WriteLine("Не ошибись в нажатии клавиши, о юный подаван");
                int b = int.Parse(Console.ReadLine());
                if (b > 0 && b < 5) {
                    a = b;
                    break; }
            }

            int[] my_array = new int[lenght];
            Console.WriteLine("Неотсортированный массив");
            Rand_myarray(my_array, lenght, my_maxValue, a);
                    foreach (int item in my_array) Console.Write(" " + item);
                    Console.WriteLine();
            Console.WriteLine("Выбери теперь Сортировки тип:");
            Console.WriteLine("1 Поразрядочка:");
            Console.WriteLine("2 Вставочка:");
            Console.WriteLine("3 Шелла сортировка:");
            Console.WriteLine("4 Выбором сортировка");
            Console.WriteLine("5 QuickSort");
            Console.WriteLine("6 Слиянием сортировка");
            int sort;
            while (true)
            {
                Console.WriteLine("Не ошибись в нажатии клавиши, о юный подаван");
                int b = int.Parse(Console.ReadLine());
                if (b > 0 && b < 7)
                {
                    sort = b;
                    break;
                }
            }
            DateTime Start;
            DateTime Stop;
            TimeSpan Elapsed = new TimeSpan();
            Start = DateTime.Now;
            switch (sort) {
                case (1):
                    RadixSort(my_array);
                    break;
                case (2):
                    InsertionSort(my_array, lenght);
                    break;
                case (3):
                    ShellSort(my_array, lenght);
                    break;
                case (4):
                    SelectionSort(my_array, lenght);
                    break;
                case (5):
                    Quicksort(my_array, 0, lenght - 1);
                    break;
                case (6):
                    my_array = Merge_Sort(my_array);
                    break;
                  
                  
            }
            Stop = DateTime.Now;
            Elapsed = Stop.Subtract(Start);
            Console.WriteLine("Выполнения время = " + Convert.ToString(Elapsed.TotalMilliseconds));
            Console.WriteLine("Узри же массив отсортированный");
                    foreach (int item in my_array) Console.Write(" " + item);
                    Console.ReadLine();
                    break;

                case (2):                                       //автоматически с записью результата
                    DateTime Start1;
                    DateTime Stop1;
                    TimeSpan Elapsed1 = new TimeSpan();
                    
                    for (int sor = 1; sor <= 4; sor++)          // кол-во вариантов рандома
                    {
                        Console.WriteLine("вариант массива " + sor);
                        int[] my_array5 = new int[lenght];                        
                        Rand_myarray(my_array5, lenght, my_maxValue, sor);
                        

                        for (int ros = 1; ros <= 6; ros++)          // кол-во вариантов сортировка
                        {
                            int[] my_array6 = new int[lenght];
                            Array.Copy(my_array5, my_array6, lenght);
                            
                            
                            switch (ros)
                            {
                                case (1):
                                    Start1 = DateTime.Now;
                                    RadixSort(my_array6);
                                    Stop1 = DateTime.Now;
                                    Elapsed1 = Stop1.Subtract(Start1);                                    
                                    my_array6 = null;                                    
                                    Console.WriteLine("Выполнения время Разрядная = " + Convert.ToString(Elapsed1.TotalMilliseconds));
                                    
                                    break;
                                case (2):
                                    Start1 = DateTime.Now;
                                    InsertionSort(my_array6, lenght);
                                    Stop1 = DateTime.Now;
                                    Elapsed1 = Stop1.Subtract(Start1);                                   
                                    my_array6 = null;                                    
                                    Console.WriteLine("Выполнения время вставка = " + Convert.ToString(Elapsed1.TotalMilliseconds));
                                    
                                    break;
                                case (3):
                                    Start1 = DateTime.Now;
                                    ShellSort(my_array6, lenght);
                                    Stop1 = DateTime.Now;
                                    Elapsed1 = Stop1.Subtract(Start1);                                    
                                    my_array6 = null;                                    
                                    Console.WriteLine("Выполнения время Шелл = " + Convert.ToString(Elapsed1.TotalMilliseconds));
                                   
                                    break;
                                case (4):
                                    Start1 = DateTime.Now;
                                    SelectionSort(my_array6, lenght);
                                    Stop1 = DateTime.Now;
                                    Elapsed1 = Stop1.Subtract(Start1);                                    
                                    my_array6 = null;                                    
                                    Console.WriteLine("Выполнения время Выбором = " + Convert.ToString(Elapsed1.TotalMilliseconds));

                                    break;
                                case (5):
                                    Start1 = DateTime.Now;
                                    Quicksort(my_array6, 0, lenght - 1);
                                    Stop1 = DateTime.Now;
                                    Elapsed1 = Stop1.Subtract(Start1);                                    
                                    my_array6 = null;
                                    Console.WriteLine("Выполнения время Квик = " + Convert.ToString(Elapsed1.TotalMilliseconds));
                                    
                                    break;
                                case (6):
                                    Start1 = DateTime.Now;
                                    my_array = Merge_Sort(my_array6);
                                    Stop1 = DateTime.Now;
                                    Elapsed1 = Stop1.Subtract(Start1);
                                    my_array6 = null;
                                    Console.WriteLine("Выполнения время Слияние = " + Convert.ToString(Elapsed1.TotalMilliseconds));
                                    
                                    break;
                            };

                        }
                    };
                    Console.ReadLine();
                    break; 



        }
            
        }

        static void Rand_myarray(int[] my_array, int length, int my_maxValue, int a) //заполнение массива рандомными числами
        {
            switch (a){
                case 1:                         // неотсортированный массив случайных значений
                    Random rand = new Random();
                    for (int y = 0; y < length; y++)
                    {
                        my_array[y] = rand.Next(1, my_maxValue);
                       // Console.Write(my_array[y]);
                      //  Console.Write(' ');
                     };
                    break;
                case 2:                         // частично отсортированный массив(первая половина массива отсортирована)
                    
                    for (int y = 0; y < length/2; y++)
                    {
                        my_array[y] = y;                        
                    };
                    Random rand2 = new Random();
                    for (int y = length/2; y < length; y++)
                    {
                        my_array[y] = rand2.Next(0, my_maxValue);                       
                    };                    
                    //foreach (int item in my_array) Console.Write(" " + item);
                    break;
                case 3:                                 //последние 10 % элементов массива случайны
                    
                    for (int y = 0; y < length -( length / 10); y++)
                    {
                        my_array[y] = y;                        
                    };                    
                    Random rand3 = new Random();
                    for (int z = length - (length / 10); z < length; z++)
                    {
                        my_array[z] = rand3.Next(0, my_maxValue);                        
                    };
                    //foreach (int item in my_array) Console.Write(" " + item);
                    break;
                case 4:                                 // Один элемент лишний
                    for (int y = 0; y < length; y++)
                    {
                        my_array[y] = y;
                    };
                    Random rand4 = new Random();
                    my_array[rand4.Next(0, length)] = 100;
                    //foreach (int item in my_array) Console.Write(" " + item);
                    break;
            }
        
         
        

        }

            static  void BubbleSortOptimized(int[] my_array, int length) // сортировка пузырьком+
            {
                bool sorted = false;
                int i = 0;
                while (!sorted)
                {
                    sorted = true;
                    for (int j = 0; j < length - i - 1; ++j)
                    {
                        if (my_array[j] > my_array[j + 1])
                        {
                        int tmp = my_array[j];
                        my_array[ j ] = my_array[ j + 1 ];
                        my_array[ j + 1 ] = tmp;

                        sorted = false;
                        }
                    }
                    ++i;
                }
            }

            static  void ShellSort(int[] my_array, int length)  // сортировка Шелла+
            {
                int h = 0;
                for (h = 1; h <= length / 9; h = 3 * h + 1)
                    ;

                for (; h > 0; h /= 3)
                {
                    for (int i = h; i < length; ++i)
                    {
                        int j = i;
                        int tmp = my_array[i];
                        while (j >= h && tmp < my_array[j - h])
                        {
                        int tmp1 = my_array[j];
                        my_array[j] = my_array[j -h];
                        my_array[j -h] = tmp1; ;
                            j -= h;
                        }
                        my_array[j] = tmp;
                    }
                }


            }

            static void SelectionSort(int[] my_array, int length)// сортировка выбором+
            {
                for (int i = 0; i < length - 1; i++)
                {
                    int min_i = i;
                    for (int j = i + 1; j < length; j++)
                    {
                        if (my_array[j] < my_array[min_i])
                        {
                            min_i = j;
                        }
                    }
                    if (min_i != i)
                    {
                    int tmp = my_array[i];
                    my_array[i] = my_array[min_i];
                    my_array[min_i] = tmp; ;
                    }
                }


            }

            static  void InsertionSort(int[] my_array, int lenght)//сортировка вставками
            {
            for (int i = 1; i < lenght; i++)
            {
                int j;
                int buf = my_array[i];
                for (j = i - 1; j >= 0; j--)
                {
                    if (my_array[j] < buf)
                        break;

                    my_array[j + 1] = my_array[j];
                }
                my_array[j + 1] = buf;
             }
            }

            static int Partition(int[] my_array, int start, int lenght)//Разбиение QS

            {
                int marker = start;
                for (int i = start; i <= lenght; i++)
            {   
                if (my_array[i] <= my_array[lenght])
                {
                    int temp = my_array[marker]; // swap
                    my_array[marker] = my_array[i];
                    my_array[i] = temp;
                    marker += 1;
                }
            }
            return marker - 1;
           }

            static void Quicksort(int[] my_array, int start, int lenght)// Быстрая сортировка

           {
               if (start >= lenght)
            {
                return;
            }
            int pivot = Partition(my_array, start, lenght);
            Quicksort(my_array, start, pivot - 1);
            Quicksort(my_array, pivot + 1, lenght);
           }

            static Int32[] Merge_Sort(Int32[] massive)
        {
            if (massive.Length == 1)
                return massive;
            Int32 mid_point = massive.Length / 2;
            return Merge(Merge_Sort(massive.Take(mid_point).ToArray()), Merge_Sort(massive.Skip(mid_point).ToArray()));
        }// сортировка слиянием

            static Int32[] Merge(Int32[] mass1, Int32[] mass2)
        {
            Int32 a = 0, b = 0;
            Int32[] merged = new int[mass1.Length + mass2.Length];
            for (Int32 i = 0; i < mass1.Length + mass2.Length; i++)
            {
                if (b < mass2.Length && a < mass1.Length)
                    if (mass1[a] > mass2[b])
                        merged[i] = mass2[b++];
                    else //if int go for
                        merged[i] = mass1[a++];
                else
                    if (b < mass2.Length)
                    merged[i] = mass2[b++];
                else
                    merged[i] = mass1[a++];
            }
            return merged;
        }

            static void RadixSort(int[] old)
            {
            int i, j;
            int[] tmp = new int[old.Length];
            for (int shift = 31; shift > -1; --shift)
            {
                j = 0;
                for (i = 0; i < old.Length; ++i)
                {
                    bool move = (old[i] << shift) >= 0;
                    if (shift == 0 ? !move : move)  // shift the 0's to old's head Да. Гугл.
                        old[i - j] = old[i];
                    else                            // move the 1's to tmp
                        tmp[j++] = old[i];
                }
                Array.Copy(tmp, 0, old, old.Length - j, j);
            }
            }



    }
}

